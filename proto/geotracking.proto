syntax="proto3";
package proto;
option go_package="./;proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

enum DeviceType {
	IOT = 0;
	ANDROID = 1;
}
message GPSData {
	float   lat  = 1;
	float   long = 2;
	float   speed = 3;
}
message Device {
	string mac_address = 1;
	string created_at  = 2;
	DeviceType device_type = 3;
	string chip_id = 4;
}
message Sensor {
	float signal_strength = 1;
	float temp = 2;
}

message Paging {
	int64 page = 1;
	int64 item_per_page = 2;
}

message LogItem {
	string device_id = 1;
	string status 	  = 2;
	string reason 	  = 3;
	string recorded_at = 4;
}

// GetDeviceLogByDeviceId...
message RequestGetDeviceLogByDeviceId {
	string device_id = 1;
}
message ResponseGetDeviceLogByDeviceId {
}

// response stream gpstracking
message ResponseStreamGPSTracking {
	string  device_id=1;
	string  status=2;
	GPSData gps_data = 3;
	Device  device_info = 4;
	Sensor  sensors = 5;
}

// ResponseGetDeviceCounter...
// item detect device...
message DetectDeviceItem {
    string device_type =  1;
    int64  count 	   =  2;
    string last_detect =  3;
}

message ResponseGetDeviceCounter {
     int64    activeted_device  = 1;
     int64    recorded_tracking = 2;
     repeated DetectDeviceItem detect_device = 3;
}

// RequestGetDeviceLogs...
message RequestGetDeviceLogs {
	Paging paging = 1;
	google.protobuf.Timestamp recorded_at = 2;
}

// ResponseGetDeviceLogs...
message ResponseGetDeviceLogs {
	repeated LogItem device_logs = 1;
}

// RequestMonitoringDeviceById...
message RequestMonitoringDeviceById {
	string device_id = 1;
}
message ResponseMonitoringDeviceById {
	LogItem device_log   = 1;
	GPSData gps_tracking = 2;
}

service Geotracking {
	rpc GetDeviceLogByDeviceId(RequestGetDeviceLogByDeviceId) returns (ResponseGetDeviceLogByDeviceId);
	rpc GetGPSTracking(google.protobuf.Empty) returns (stream ResponseStreamGPSTracking);
	rpc GetDeviceCounter(google.protobuf.Empty) returns (ResponseGetDeviceCounter);
	rpc GetDeviceLogs(RequestGetDeviceLogs) returns (ResponseGetDeviceLogs);
	rpc MonitoringDeviceById(RequestMonitoringDeviceById) returns (stream ResponseMonitoringDeviceById);
}
